module register_file #(
    parameter ADDR_BUS_WIDTH = 5,
    parameter DATA_BUS_WIDTH = 32
) (
    input clk,
    
    // From datapath
    input [ADDR_BUS_WIDTH - 1:0] addr1,
    input [ADDR_BUS_WIDTH - 1:0] addr2,
    input [ADDR_BUS_WIDTH - 1:0] addr3,
    input [DATA_BUS_WIDTH - 1:0] write_data,
    input write_en,
    output reg [DATA_BUS_WIDTH - 1:0] read_data1,
    output reg [DATA_BUS_WIDTH - 1:0] read_data2,
    
    // From UART
    input rst,
    input en,
    input Tx_busy,
    output reg [7:0] dout,        // Output is now 8 bits
    output reg Ready_Byte,       // Ready signal for 8-bit data
    output reg [7:0] LED         // Outputs part of a register value to LEDs
);

    // Local parameters
    localparam REG_FILE_DEPTH = 32;
    
    // Register file
    reg [DATA_BUS_WIDTH - 1:0] registerFile [0:REG_FILE_DEPTH - 1];
    
    // Register 0 is always 0
    always @(*) begin
        read_data1 = (addr1 == 5'b00000) ? 32'b0 : registerFile[addr1];
        read_data2 = (addr2 == 5'b00000) ? 32'b0 : registerFile[addr2];
    end

    // Initial values for the register file
    integer i;
    initial begin
        for (i = 0; i < REG_FILE_DEPTH; i = i + 1) begin
            registerFile[i] = 32'b0;
        end
        registerFile[5] = 32'h00000006;
        registerFile[9] = 32'h00002004;
        registerFile[4] = 32'b00000000000000000000000000011111;
    end

    // Write logic
    always @(negedge clk) begin
        if (write_en) begin
            registerFile[addr3] <= write_data;
        end
    end

    // Assign LED to the lower byte of register 4
    always @(*) begin
        LED = registerFile[4][7:0];
    end

    // State encoding
    reg [2:0] current_state, next_state;
    localparam IDLE        = 3'b000,
               OUTPUT_REG  = 3'b001,
               OUTPUT_BYTE = 3'b010,
               SEND_BYTE   = 3'b011,
               BYTE_SENT   = 3'b100,
               REG_SENT    = 3'b101;

    // Internal signals
    reg [4:0] incrementer;           // Register index
    reg [1:0] byte_counter;          // Byte counter for 32-bit data
    reg [31:0] current_reg_value;    // Current 32-bit register value

    // State transition logic
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            current_state <= IDLE;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        next_state = current_state; // Default to current state
        case (current_state)
            IDLE: begin
                if (en) begin
                    next_state = OUTPUT_REG;
                end
            end
            OUTPUT_REG: begin
                if (incrementer <= 31) begin
                    next_state = OUTPUT_BYTE;
                end else begin
                    next_state = IDLE;
                end
            end
            OUTPUT_BYTE: begin
                if (!Tx_busy) begin
                    next_state = SEND_BYTE;
                end
            end
            SEND_BYTE: begin
                if (!Tx_busy) begin
                    next_state = BYTE_SENT;
                end
            end
            BYTE_SENT: begin
                if (byte_counter < 3) begin
                    next_state = OUTPUT_BYTE;
                end else if (byte_counter == 3) begin
                    next_state = REG_SENT;
                end
            end
            REG_SENT: begin
                next_state = OUTPUT_REG;
            end
        endcase
    end

    // Output and control logic
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            incrementer <= 5'b0;
            byte_counter <= 2'b0;
            dout <= 8'b0;
            Ready_Byte <= 1'b0;
        end else begin
            case (current_state)
                IDLE: begin
                    incrementer <= 5'b0;
                    byte_counter <= 2'b0;
                    dout <= 8'b0;
                    Ready_Byte <= 1'b0;
                end
                OUTPUT_REG: begin
                    current_reg_value <= registerFile[incrementer];
                    Ready_Byte <= 1'b0;
                    byte_counter <= 2'b0;
                end
                SEND_BYTE: begin
                    Ready_Byte <= 1'b1;
                    case (byte_counter)
                        2'b00: dout <= current_reg_value[31:24];
                        2'b01: dout <= current_reg_value[23:16];
                        2'b10: dout <= current_reg_value[15:8];
                        2'b11: dout <= current_reg_value[7:0];
                    endcase
                end
                BYTE_SENT: begin
                    Ready_Byte <= 1'b0;
                    byte_counter <= byte_counter + 1;
                end
                REG_SENT: begin
                    Ready_Byte <= 1'b0;
                    incrementer <= incrementer + 1;
                end
            endcase
        end
    end

endmodule
